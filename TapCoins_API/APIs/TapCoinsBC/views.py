from rest_framework.response import Response
from rest_framework.decorators import api_view
from ...models import *
from decouple import config
from web3 import Web3
from web3.middleware import geth_poa_middleware
# from google.cloud import recaptchaenterprise_v1
from ...Utilities.helpful_functions import ping
# implement ping in here later

goerli_rpc_url = 'https://goerli.infura.io/v3/4108e6964fae4225b9f9c53f461e1cd4'
w3 = Web3(Web3.HTTPProvider(goerli_rpc_url))
contract_address_const = "0x93592b17CBa6d8664F2DD5C58095B24D852c8944"
contract_abi_const = [{'inputs': [{'internalType': 'address', 'name': '_taptapCoinAddress', 'type': 'address'}, {'internalType': 'address', 'name': '_priceFeedAddress', 'type': 'address'}], 'stateMutability': 'payable', 'type': 'constructor', 'name': 'constructor'}, {'anonymous': False, 'inputs': [{'indexed': False, 'internalType': 'string', 'name': '_message', 'type': 'string'}], 'name': 'CheckingEvent', 'type': 'event'}, {'anonymous': False, 'inputs': [{'indexed': True, 'internalType': 'address', 'name': 'recipient', 'type': 'address'}, {'indexed': False, 'internalType': 'uint256', 'name': 'amount', 'type': 'uint256'}], 'name': 'EtherSent', 'type': 'event'}, {'anonymous': False, 'inputs': [{'indexed': True, 'internalType': 'address', 'name': 'previousOwner', 'type': 'address'}, {'indexed': True, 'internalType': 'address', 'name': 'newOwner', 'type': 'address'}], 'name': 'OwnershipTransferred', 'type': 'event'}, {'inputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'name': 'activePlayers', 'outputs': [{'internalType': 'address payable', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'user', 'type': 'address'}], 'name': 'addActivePlayer', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'newAccount', 'type': 'address'}, {'internalType': 'string', 'name': 'code', 'type': 'string'}], 'name': 'addWallet', 'outputs': [{'internalType': 'address payable[]', 'name': '', 'type': 'address[]'}], 'stateMutability': 'nonpayable', 'type': 'function'}, {'inputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'name': 'addresses', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [], 'name': 'awardTapTapCoin', 'outputs': [], 'stateMutability': 'payable', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'user', 'type': 'address'}], 'name': 'checkForUser', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'user', 'type': 'address'}], 'name': 'checkUserFaceIdChecked', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'user', 'type': 'address'}], 'name': 'checkUserIsActive', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'string', 'name': 'str1', 'type': 'string'}, {'internalType': 'string', 'name': 'str2', 'type': 'string'}], 'name': 'compare', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'pure', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'user', 'type': 'address'}, {'internalType': 'string', 'name': 'code', 'type': 'string'}, {'internalType': 'uint256', 'name': 'transaction_price', 'type': 'uint256'}], 'name': 'faceIdCheck', 'outputs': [{'components': [{'internalType': 'uint256', 'name': 'wins', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'games', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'gameIndex', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'waitTimeStart', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'faceIdCheck', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isValidUser', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isValidFaceId', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isActive', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isWinner', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isAboveZero', 'type': 'bool'}, {'internalType': 'bool', 'name': 'has100Games', 'type': 'bool'}, {'internalType': 'bool', 'name': 'skipping', 'type': 'bool'}, {'components': [{'internalType': 'uint256', 'name': 'addWalletTransaction', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'faceIdCheckTransaction', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'gameTransactions', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'totalTransactionAmount', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'hasTotalTransactions', 'type': 'bool'}], 'internalType': 'struct TapCoinGame.TransactionInformation', 'name': 'transaction_info', 'type': 'tuple'}], 'internalType': 'struct TapCoinGame.streakBoardValues', 'name': '', 'type': 'tuple'}], 'stateMutability': 'nonpayable', 'type': 'function'}, {'inputs': [], 'name': 'getCurrentActualUsdOneCentCost', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [], 'name': 'getPrice', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [], 'name': 'getTotalContractAmount', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [], 'name': 'getTotalTapTapCoinSupply', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'user', 'type': 'address'}], 'name': 'getUserStreakBoard', 'outputs': [{'components': [{'internalType': 'uint256', 'name': 'wins', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'games', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'gameIndex', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'waitTimeStart', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'faceIdCheck', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isValidUser', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isValidFaceId', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isActive', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isWinner', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isAboveZero', 'type': 'bool'}, {'internalType': 'bool', 'name': 'has100Games', 'type': 'bool'}, {'internalType': 'bool', 'name': 'skipping', 'type': 'bool'}, {'components': [{'internalType': 'uint256', 'name': 'addWalletTransaction', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'faceIdCheckTransaction', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'gameTransactions', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'totalTransactionAmount', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'hasTotalTransactions', 'type': 'bool'}], 'internalType': 'struct TapCoinGame.TransactionInformation', 'name': 'transaction_info', 'type': 'tuple'}], 'internalType': 'struct TapCoinGame.streakBoardValues', 'name': '', 'type': 'tuple'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [], 'name': 'get_test_var', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [], 'name': 'owner', 'outputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'name': 'playerIndexes', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'address[]', 'name': 'users', 'type': 'address[]'}], 'name': 'removeActivePlayer', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, {'inputs': [], 'name': 'renounceOwnership', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, {'inputs': [], 'name': 'returnWinningsAmount', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': '', 'type': 'address'}], 'name': 'streakBoard', 'outputs': [{'internalType': 'uint256', 'name': 'wins', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'games', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'gameIndex', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'waitTimeStart', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'faceIdCheck', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isValidUser', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isValidFaceId', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isActive', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isWinner', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isAboveZero', 'type': 'bool'}, {'internalType': 'bool', 'name': 'has100Games', 'type': 'bool'}, {'internalType': 'bool', 'name': 'skipping', 'type': 'bool'}, {'components': [{'internalType': 'uint256', 'name': 'addWalletTransaction', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'faceIdCheckTransaction', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'gameTransactions', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'totalTransactionAmount', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'hasTotalTransactions', 'type': 'bool'}], 'internalType': 'struct TapCoinGame.TransactionInformation', 'name': 'transaction_info', 'type': 'tuple'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [], 'name': 'taptapCoin', 'outputs': [{'internalType': 'contract IERC20', 'name': '', 'type': 'address'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [], 'name': 'testFunction', 'outputs': [{'internalType': 'string', 'name': '', 'type': 'string'}], 'stateMutability': 'pure', 'type': 'function'}, {'inputs': [], 'name': 'testVar', 'outputs': [{'internalType': 'bool', 'name': '', 'type': 'bool'}], 'stateMutability': 'view', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'newOwner', 'type': 'address'}], 'name': 'transferOwnership', 'outputs': [], 'stateMutability': 'nonpayable', 'type': 'function'}, {'inputs': [{'internalType': 'address', 'name': 'winner', 'type': 'address'}, {'internalType': 'address', 'name': 'loser', 'type': 'address'}, {'internalType': 'uint256', 'name': 'transaction_price_winner', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'transaction_price_loser', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'percentage', 'type': 'uint256'}], 'name': 'updatePlayersWins', 'outputs': [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}], 'stateMutability': 'nonpayable', 'type': 'function'}, {'stateMutability': 'payable', 'type': 'receive'}]
contract_bytecode_const = "60c0604052601a60808190527f54454d504f5241525941444457414c4c455450415353434f444500000000000060a090815262000040916003919062000149565b506040805180820190915260138082527f54454d504f52415259464143454944434f4445000000000000000000000000006020909201918252620000879160049162000149565b50600580553480156200009957600080fd5b5060405162002ea138038062002ea1833981016040819052620000bc916200020c565b620000c733620000f9565b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905562000280565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054620001579062000244565b90600052602060002090601f0160209004810192826200017b5760008555620001c6565b82601f106200019657805160ff1916838001178555620001c6565b82800160010185558215620001c6579182015b82811115620001c6578251825591602001919060010190620001a9565b50620001d4929150620001d8565b5090565b5b80821115620001d45760008155600101620001d9565b80516001600160a01b03811681146200020757600080fd5b919050565b600080604083850312156200022057600080fd5b6200022b83620001ef565b91506200023b60208401620001ef565b90509250929050565b600181811c908216806200025957607f821691505b6020821081036200027a57634e487b7160e01b600052602260045260246000fd5b50919050565b612c1180620002906000396000f3fe60806040526004361061019c5760003560e01c80638236e616116100ec578063b24f768c1161008a578063dbe13d7511610064578063dbe13d751461052c578063e16b4a9b14610642578063edf26d9b14610664578063f2fde38b1461068457600080fd5b8063b24f768c146104bf578063b55f108f146104df578063c28aafb1146104ff57600080fd5b806391628795116100c657806391628795146104115780639895ece41461043e57806398d5fdca146104535780639eee624a1461046857600080fd5b80638236e6161461039a57806382542aa9146103ba5780638da5cb5b146103f357600080fd5b80633a96fdd7116101595780636e6fe0ac116101335780636e6fe0ac146102e4578063715018a614610311578063745b4b3b146103265780637f4c77561461035e57600080fd5b80633a96fdd7146102845780634c10b79c146102a457806364a48696146102c457600080fd5b8063039e7a71146101a15780630f966112146101c95780631d3345f2146101e957806324a30c2514610219578063326418b71461023b5780633a0ef37114610271575b600080fd5b3480156101ad57600080fd5b506101b66106a4565b6040519081526020015b60405180910390f35b3480156101d557600080fd5b506101b66101e43660046123f7565b610717565b3480156101f557600080fd5b50610209610204366004612421565b61081d565b60405190151581526020016101c0565b34801561022557600080fd5b5061023961023436600461248a565b610845565b005b34801561024757600080fd5b506101b6610256366004612421565b6001600160a01b031660009081526007602052604090205490565b61023961027f366004612421565b610a57565b34801561029057600080fd5b5061020961029f3660046125a7565b610b32565b3480156102b057600080fd5b506101b66102bf366004612421565b610b9c565b3480156102d057600080fd5b506102096102df366004612421565b610bf6565b3480156102f057600080fd5b506103046102ff36600461260b565b610c1c565b6040516101c091906126be565b34801561031d57600080fd5b50610239610fd8565b34801561033257600080fd5b50600154610346906001600160a01b031681565b6040516001600160a01b0390911681526020016101c0565b34801561036a57600080fd5b50610209610379366004612421565b6001600160a01b031660009081526007602052604090206003015460ff1690565b3480156103a657600080fd5b506101b66103b5366004612785565b61103e565b3480156103c657600080fd5b506101b66103d5366004612421565b6001600160a01b031660009081526007602052604090206001015490565b3480156103ff57600080fd5b506000546001600160a01b0316610346565b34801561041d57600080fd5b506101b661042c366004612421565b60086020526000908152604090205481565b34801561044a57600080fd5b506101b6611932565b34801561045f57600080fd5b506101b661196d565b34801561047457600080fd5b50610239610483366004612421565b6001600160a01b031660009081526007602052604090206064600182015560038101805460ff60301b1916600160301b17905542600290910155565b3480156104cb57600080fd5b506101b66104da3660046123f7565b611a04565b3480156104eb57600080fd5b506103466104fa3660046127ed565b611b57565b34801561050b57600080fd5b5061051f61051a366004612806565b611b81565b6040516101c0919061284a565b34801561053857600080fd5b5061062a610547366004612421565b60076020818152600092835260409283902080546001820154600283015460038401548751610120810189526004860154815260058601549681019690965260068501549786019790975294830154606085015260088301546080850152600983015460a0850152600a83015460c0850152600b83015460e0850152600c9092015460ff908116151561010085810191909152919592949381841693928304821692620100008104831692630100000082048116926401000000008304821692650100000000008104831692600160301b8204811692600160381b90920416908c565b6040516101c09c9b9a99989796959493929190612897565b34801561064e57600080fd5b50610657611d82565b6040516101c0919061293b565b34801561067057600080fd5b5061034661067f3660046127ed565b611da2565b34801561069057600080fd5b5061023961069f366004612421565b611db2565b600154604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610712919061296e565b905090565b6001600160a01b0382166000908152600760205260408120600c015460ff1615156001146107c05760405162461bcd60e51b815260206004820152604560248201527f596f7520646f206e6f74206861766520612076616c6964207472616e7361637460448201527f696f6e20616d6f756e7420746f2063616c63756c617465207468652077696e6e60648201526434b733b99760d91b608482015260a4015b60405180910390fd5b6001600160a01b0383166000908152600760205260408120600b81015460058201546004909201549092916107f49161299d565b90506000610802828461299d565b905060006108108287611e7d565b9450505050505b92915050565b6001600160a01b03166000908152600760205260409020600301546301000000900460ff1690565b60005b8151811015610a535760076000838381518110610867576108676129b5565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060030160019054906101000a900460ff1615610a41576000600860008484815181106108bd576108bd6129b5565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020549050600060016009805490506108fc91906129cb565b9050600060098281548110610913576109136129b5565b6000918252602082200154600980546001600160a01b0390921693509085908110610940576109406129b5565b600091825260209091200154600980546001600160a01b03909216925083918690811061096f5761096f6129b5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600860008888815181106109b4576109b46129b5565b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555060086000826001600160a01b03166001600160a01b03168152602001908152602001600020600090556009805480610a1a57610a1a6129e2565b600082815260209020810160001990810180546001600160a01b0319169055019055505050505b80610a4b816129f8565b915050610848565b5050565b6001600160a01b038116600090815260086020526040812054600980549091908110610a8557610a856129b5565b60009182526020822001546040516001600160a01b0390911692508190839034908381818185875af1925050503d8060008114610ade576040519150601f19603f3d011682016040523d82523d6000602084013e610ae3565b606091505b509150915081610b2c5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016107b7565b50505050565b60008151835114610b4557506000610817565b81604051602001610b569190612a11565b6040516020818303038152906040528051906020012083604051602001610b7d9190612a11565b6040516020818303038152906040528051906020012014905092915050565b600980546001808201835560008381527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af90920180546001600160a01b0319166001600160a01b03861617905591549091610817916129cb565b6001600160a01b0316600090815260076020526040902060030154610100900460ff1690565b610c2461231c565b610c60846040518060400160405280601a81526020017954454d504f5241525941444457414c4c455450415353434f444560301b815250611b81565b50600060048054610c7090612a2d565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9c90612a2d565b8015610ce95780601f10610cbe57610100808354040283529160200191610ce9565b820191906000526020600020905b815481529060010190602001808311610ccc57829003601f168201915b50505050509050610cf985610bf6565b1515600114610d4a5760405162461bcd60e51b815260206004820152601f60248201527f54686973206163636f756e74206973206e6f7420726567697374657265642e0060448201526064016107b7565b610d538561081d565b1515600114610da45760405162461bcd60e51b815260206004820152601b60248201527f54686973206163636f756e74206973206e6f74206163746976652e000000000060448201526064016107b7565b610dae8482610b32565b610dfa5760405162461bcd60e51b815260206004820152601f60248201527f54686973206973206e6f7420612076616c6964207472616e73616374696f6e0060448201526064016107b7565b610e0385611ea5565b1515600114610e6e5760405162461bcd60e51b815260206004820152603160248201527f54686973206163636f756e74206973206e6f7420616c6c6f77656420746f20706044820152703630bc9030ba103a3434b9903a34b6b29760791b60648201526084016107b7565b50506001600160a01b0383166000908152600760208181526040928390206003810180546005830187905567ff000000000000ff191660019081179182905585516101808101875283548152838201548186015260028401548188015260608082019290925261010080840460ff90811615156080808501919091526201000086048216151560a080860191909152630100000087048316151560c08087019190915264010000000088048416151560e0808801919091526501000000000089048516151587870152600160301b89048516151561012080890191909152600160381b909904851615156101408801528c519889018d5260048a015489529988018d905260068901549b88019b909b529887015494860194909452600886015493850193909352600985015496840196909652600a84015496830196909652600b83015493820193909352600c909101549091161515918101919091526101608201529392505050565b6000546001600160a01b031633146110325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107b7565b61103c6000611f45565b565b600061107c876040518060400160405280601a81526020017954454d504f5241525941444457414c4c455450415353434f444560301b815250611b81565b506110b9866040518060400160405280601a81526020017954454d504f5241525941444457414c4c455450415353434f444560301b815250611b81565b506110ff876040518060400160405280601381526020017254454d504f52415259464143454944434f444560681b8152506e01ed09bead87c0378d8e6400000000610c1c565b50611145866040518060400160405280601381526020017254454d504f52415259464143454944434f444560681b8152506e01ed09bead87c0378d8e6400000000610c1c565b506001600160a01b038716600090815260076020526040812080546001929061116f90849061299d565b90915550506001600160a01b038716600090815260076020526040812080546001929061119d90849061299d565b90915550506001600160a01b03871660009081526007602052604081208054600192906111cb90849061299d565b90915550506001600160a01b03871660009081526007602052604081208054600192906111f990849061299d565b90915550506001600160a01b0387166000908152600760205260408120600190810180549192909161122c90849061299d565b90915550506001600160a01b0386166000908152600760205260408120600190810180549192909161125f90849061299d565b90915550506001600160a01b0387166000908152600760205260408120600190810180549192909161129290849061299d565b90915550506001600160a01b038616600090815260076020526040812060019081018054919290916112c590849061299d565b90915550506001600160a01b038716600090815260076020526040812060019081018054919290916112f890849061299d565b90915550506001600160a01b0386166000908152600760205260408120600190810180549192909161132b90849061299d565b90915550506001600160a01b0387166000908152600760205260408120600190810180549192909161135e90849061299d565b90915550506001600160a01b0386166000908152600760205260408120600190810180549192909161139190849061299d565b90915550506001600160a01b0380881660009081526007602081905260408083206e01ed09bead87c0378d8e6400000000600680830182905582850182905560088084018390556009938401839055968d16865292909420918201849055918101839055928301829055919091015561140987610bf6565b15156001146114695760405162461bcd60e51b815260206004820152602660248201527f5468652057696e6e696e67206163636f756e74206973206e6f742072656769736044820152653a32b932b21760d11b60648201526084016107b7565b61147286610bf6565b15156001146114d15760405162461bcd60e51b815260206004820152602560248201527f546865204c6f73696e67206163636f756e74206973206e6f742072656769737460448201526432b932b21760d91b60648201526084016107b7565b6114da8761081d565b15156001146115365760405162461bcd60e51b815260206004820152602260248201527f5468652057696e6e696e67206163636f756e74206973206e6f74206163746976604482015261329760f11b60648201526084016107b7565b61153f8661081d565b151560011461159a5760405162461bcd60e51b815260206004820152602160248201527f546865204c6f73696e67206163636f756e74206973206e6f74206163746976656044820152601760f91b60648201526084016107b7565b6001600160a01b03871660009081526007602052604090206003015460ff1615156001146116275760405162461bcd60e51b815260206004820152603460248201527f5468652057696e6e696e67206163636f756e7420646f6573206e6f7420686176604482015273329030903b30b634b2102922a1a0a82a21a4209760611b60648201526084016107b7565b6001600160a01b03861660009081526007602052604090206003015460ff1615156001146116b35760405162461bcd60e51b815260206004820152603360248201527f546865204c6f73696e67206163636f756e7420646f6573206e6f7420686176656044820152721030903b30b634b2102922a1a0a82a21a4209760691b60648201526084016107b7565b6116bc87611ea5565b61172e5760405162461bcd60e51b815260206004820152603860248201527f5468652057696e6e696e67206163636f756e74206973206e6f7420616c6c6f7760448201527f656420746f20706c617920617420746869732074696d652e000000000000000060648201526084016107b7565b61173786611ea5565b6117a95760405162461bcd60e51b815260206004820152603760248201527f546865204c6f73696e67206163636f756e74206973206e6f7420616c6c6f776560448201527f6420746f20706c617920617420746869732074696d652e00000000000000000060648201526084016107b7565b6001600160a01b03808816600081815260076020526040808220600c808201805460ff19908116909155958c1684529183209091018054909416909355908152815460019291906117fb90849061299d565b90915550506001600160a01b038087166000908152600760205260408082208290559189168152908120600190810180549192909161183b90849061299d565b90915550506001600160a01b0386166000908152600760205260408120600190810180549192909161186e90849061299d565b90915550506001600160a01b038088166000908152600760205260408082206003908101805464ff000000001990811664010000000017909155938a168352912001805490911690556118c18786611f95565b6118cb8685611f95565b821561191a576005546001600160a01b0388166000908152600760205260409020541061191a5760006118fe8884610717565b905061190a8888612100565b61191388610a57565b9050611928565b6119248787612100565b5060015b9695505050505050565b6000662386f26fc10000670de0b6b3a76400008261194e61196d565b90508061195b8385612a67565b6119659190612a9c565b935050505090565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156119c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e79190612aca565b505050915050806402540be4006119fe9190612b1a565b91505090565b600081600003611a3057506001600160a01b038216600090815260076020526040902060040154610817565b81600103611a5a57506001600160a01b038216600090815260076020526040902060050154610817565b81600203611a8457506001600160a01b038216600090815260076020526040902060060154610817565b81600303611aaf57506001600160a01b03821660009081526007602081905260409091200154610817565b81600403611ad957506001600160a01b038216600090815260076020526040902060080154610817565b81600503611b0357506001600160a01b038216600090815260076020526040902060090154610817565b81600603611b2d57506001600160a01b0382166000908152600760205260409020600a0154610817565b8160070361081757506001600160a01b0382166000908152600760205260409020600b0154610817565b60098181548110611b6757600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600060038054611b9290612a2d565b80601f0160208091040260200160405190810160405280929190818152602001828054611bbe90612a2d565b8015611c0b5780601f10611be057610100808354040283529160200191611c0b565b820191906000526020600020905b815481529060010190602001808311611bee57829003601f168201915b50505050509050611c1c8382610b32565b611c685760405162461bcd60e51b815260206004820152601f60248201527f54686973206973206e6f7420612076616c6964207472616e73616374696f6e0060448201526064016107b7565b6001600160a01b0384166000908152600760205260408120908155600301805463ff00ffff19166301000100179055611c9f611932565b6001600160a01b038516600090815260076020819052604082206004810193909355600583018290556006830182905582018190556008820181905560098201819055600a82018190556003909101805460ff60301b19169055611d0285610b9c565b6001600160a01b03861660009081526008602090815260409182902083905560098054835181840281018401909452808452939450919290830182828015611d7357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611d55575b50505050509250505092915050565b6060604051806060016040528060288152602001612bb460289139905090565b60068181548110611b6757600080fd5b6000546001600160a01b03163314611e0c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107b7565b6001600160a01b038116611e715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016107b7565b611e7a81611f45565b50565b600080611e9183662386f26fc10000612a67565b9050611e9d8185612a9c565b949350505050565b6001600160a01b038116600090815260076020526040812060030154600190600160301b900460ff16611edb5750600192915050565b6001600160a01b038316600090815260076020526040902060020154611f0290829061299d565b4210611f3c5750506001600160a01b0316600090815260076020526040812060038101805460ff60301b1916905560019081019190915590565b50600092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03821660009081526007602052604081206001810154600390910154909190600160381b900460ff1661209a576006821015611fe457611fdd6001836129cb565b9050612060565b600982111561203357611ff8600583612b9f565b60000361202857506001600160a01b0383166000908152600760205260408120600301805460ff19169055612060565b611fdd60018261299d565b6001600160a01b0384166000908152600760205260409020600301805460ff60381b1916600160381b1790555b6001600160a01b038416600090815260076020526040902060030154600160381b900460ff16612095576120958484836121b3565b610b2c565b6001600160a01b03841660009081526007602052604090206001908101546005916120c5919061299d565b6120cf9190612b9f565b600003610b2c575050506001600160a01b03166000908152600760205260409020600301805460ff60381b19169055565b6001600160a01b038216600090815260076020526040902060010154606403612158576001600160a01b038216600090815260076020526040902060038101805460ff60301b1916600160301b179055426002909101555b6001600160a01b038116600090815260076020526040902060010154606403610a53576001600160a01b038116600090815260076020526040902060038101805460ff60301b1916600160301b179055426002909101555050565b806000036121de576001600160a01b0383166000908152600760205260409020600601829055612287565b8060010361220a576001600160a01b038316600090815260076020819052604090912001829055612287565b80600203612235576001600160a01b0383166000908152600760205260409020600801829055612287565b80600303612260576001600160a01b0383166000908152600760205260409020600901829055612287565b80600403612287576001600160a01b0383166000908152600760205260409020600a018290555b6001600160a01b0383166000908152600760208190526040909120600a81015460098201546008830154938301546006909301549193909290916122cb919061299d565b6122d5919061299d565b6122df919061299d565b6122e9919061299d565b6001600160a01b039093166000908152600760205260409020600b8101939093555050600c01805460ff19166001179055565b6040518061018001604052806000815260200160008152602001600081526020016000151581526020016000151581526020016000151581526020016000151581526020016000151581526020016000151581526020016000151581526020016000151581526020016123d660405180610120016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b905290565b80356001600160a01b03811681146123f257600080fd5b919050565b6000806040838503121561240a57600080fd5b612413836123db565b946020939093013593505050565b60006020828403121561243357600080fd5b61243c826123db565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561248257612482612443565b604052919050565b6000602080838503121561249d57600080fd5b823567ffffffffffffffff808211156124b557600080fd5b818501915085601f8301126124c957600080fd5b8135818111156124db576124db612443565b8060051b91506124ec848301612459565b818152918301840191848101908884111561250657600080fd5b938501935b8385101561252b5761251c856123db565b8252938501939085019061250b565b98975050505050505050565b600082601f83011261254857600080fd5b813567ffffffffffffffff81111561256257612562612443565b612575601f8201601f1916602001612459565b81815284602083860101111561258a57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156125ba57600080fd5b823567ffffffffffffffff808211156125d257600080fd5b6125de86838701612537565b935060208501359150808211156125f457600080fd5b5061260185828601612537565b9150509250929050565b60008060006060848603121561262057600080fd5b612629846123db565b9250602084013567ffffffffffffffff81111561264557600080fd5b61265186828701612537565b925050604084013590509250925092565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151151581840152505050565b60006102808201905082518252602083015160208301526040830151604083015260608301516126f2606084018215159052565b506080830151612706608084018215159052565b5060a083015161271a60a084018215159052565b5060c083015161272e60c084018215159052565b5060e083015161274260e084018215159052565b506101008381015115159083015261012080840151151590830152610140808401511515908301526101608084015161277d82850182612662565b505092915050565b60008060008060008060c0878903121561279e57600080fd5b6127a7876123db565b95506127b5602088016123db565b94506040870135935060608701359250608087013580151581146127d857600080fd5b8092505060a087013590509295509295509295565b6000602082840312156127ff57600080fd5b5035919050565b6000806040838503121561281957600080fd5b612822836123db565b9150602083013567ffffffffffffffff81111561283e57600080fd5b61260185828601612537565b6020808252825182820181905260009190848201906040850190845b8181101561288b5783516001600160a01b031683529284019291840191600101612866565b50909695505050505050565b8c8152602081018c9052604081018b90528915156060820152881515608082015287151560a082015286151560c082015285151560e082015284151561010082015261028081018415156101208301528315156101408301526128fe610160830184612662565b9d9c50505050505050505050505050565b60005b8381101561292a578181015183820152602001612912565b83811115610b2c5750506000910152565b602081526000825180602084015261295a81604085016020870161290f565b601f01601f19169190910160400192915050565b60006020828403121561298057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156129b0576129b0612987565b500190565b634e487b7160e01b600052603260045260246000fd5b6000828210156129dd576129dd612987565b500390565b634e487b7160e01b600052603160045260246000fd5b600060018201612a0a57612a0a612987565b5060010190565b60008251612a2381846020870161290f565b9190910192915050565b600181811c90821680612a4157607f821691505b602082108103612a6157634e487b7160e01b600052602260045260246000fd5b50919050565b6000816000190483118215151615612a8157612a81612987565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612aab57612aab612a86565b500490565b805169ffffffffffffffffffff811681146123f257600080fd5b600080600080600060a08688031215612ae257600080fd5b612aeb86612ab0565b9450602086015193506040860151925060608601519150612b0e60808701612ab0565b90509295509295909350565b60006001600160ff1b0381841382841380821686840486111615612b4057612b40612987565b600160ff1b6000871282811687830589121615612b5f57612b5f612987565b60008712925087820587128484161615612b7b57612b7b612987565b87850587128184161615612b9157612b91612987565b505050929093029392505050565b600082612bae57612bae612a86565b50069056fe43414c4c494e472054484520544553542046554e4354494f4e20494e20544150434f494e47414d45a2646970667358221220007d35869ca1c4317d5fb4c819e6e9bc8ff3e4fda3836fe590511cd82e84096c64736f6c634300080e0033"
w3.middleware_onion.inject(geth_poa_middleware, layer=0)

@api_view(['POST'])
def save_wallet(request):
    try:
      wallet_address = request.data['wallet']
      if wallet_address != "None":
        if config('IS_HEROKU_ENV', cast=bool):
          # Verify if the connection is successful
          if w3.is_connected():
            print("-" * 50)
            print("Connection Successful")
            print(w3.eth.chain_id)
            print(w3.eth.gas_price)
            print(w3.eth.block_number)
            print("-" * 50)
            print("THE WALLET ADDRESS IS BELOW")
            print(wallet_address)
            # Load the contract ABI and address
            contract_address = contract_address_const
            # contract_address = config('CONTRACT_ADDRESS')  # Replace with your contract address
            contract_abi = contract_abi_const
            print("SET THE CONTRACT ADDRRESS AND ABI")

            # # Create a contract object
            contract = w3.eth.contract(address=contract_address, abi=contract_abi)
            print("CREATED THE CONTRACT VARIABLE")
            function_to_call = contract.functions.addWallet(wallet_address, "TEMPORARYADDWALLETPASSCODE")
            print("AFTER FUNCTION TO CALL")
            # Build the transaction
            transaction = function_to_call.build_transaction({
                "chainId": 5,  # Replace with the appropriate chain ID
                "gasPrice": w3.to_wei('50', 'gwei'),  # Set the gas price as needed
                "gas": 200000,  # Set the gas limit as needed
                "nonce": w3.eth.get_transaction_count("0x078893aE92b2e866464E9853da549304C4dB3e28"),
            })
            print("AFTER MAKING THE TRANSACTION")
            # Sign the transaction
            signed_transaction = w3.eth.account.sign_transaction(transaction, "75029fb3adb8ca1b275cbd6d224796d1795e13f9b578e2669666796666dd4881")
            print("AFTER SIGNING THE TRANSACTION")
            # Send the transaction
            transaction_hash = w3.eth.send_raw_transaction(signed_transaction.rawTransaction)
            print("AFTER GETTING THE TRANSACTION HASH")
            # Print the transaction hash
            print("Transaction Hash:", transaction_hash)
            # Check the transaction status
            receipt = w3.eth.wait_for_transaction_receipt(transaction_hash)
            print("Transaction Receipt:", receipt)
            print("Transaction Receipt STATUS:", receipt["status"])
            # Interact with the contract (e.g., call functions)
            result = contract.functions.checkForUser("0x078893aE92b2e866464E9853da549304C4dB3e28").call()
            result2 = contract.functions.checkForUser("0x60F4a7E61B3f675C08b682204D93e5E42b6bd2c7").call()
            print("RESULT IS BELOW")
            print(result)
            print("RESULT2 IS BELOW")
            print(result2)
            if result:
              data = {
                  "response": "SUCCESS"
              }
            else:
              data = {
                "response": "FAILURE"
              }
            return Response(data)
          else:
            print("Connection Failed")
            data = {
              "response": "FAILURE"
            }
            return Response(data)
        else:
          if w3.isConnected():
            print("-" * 50)
            print("Connection Successful")
            print(w3.eth.chain_id)
            print(w3.eth.gas_price)
            print(w3.eth.block_number)
            print("-" * 50)
            print("THE WALLET ADDRESS IS BELOW")
            print(wallet_address)
            # Load the contract ABI and address
            contract_address = contract_address_const
            # contract_address = config('CONTRACT_ADDRESS')  # Replace with your contract address
            contract_abi = contract_abi_const
            print("SET THE CONTRACT ADDRRESS AND ABI")

            # # Create a contract object
            contract = w3.eth.contract(address=contract_address, abi=contract_abi)
            print("CREATED THE CONTRACT VARIABLE")
            account = ''
            if request.data['isUserOne'] == True:
                account = '0x078893aE92b2e866464E9853da549304C4dB3e28'
            else:
                account = '0x60F4a7E61B3f675C08b682204D93e5E42b6bd2c7'
            function_to_call = contract.functions.addWallet(account, "TEMPORARYADDWALLETPASSCODE")
            print("AFTER FUNCTION TO CALL")
            # Build the transaction
            transaction = function_to_call.buildTransaction({
                "chainId": 5,  # Replace with the appropriate chain ID
                "gasPrice": w3.toWei('50', 'gwei'),  # Set the gas price as needed
                "gas": 200000,  # Set the gas limit as needed
                "nonce": w3.eth.getTransactionCount("0x078893aE92b2e866464E9853da549304C4dB3e28"),
            })
            print("AFTER MAKING THE TRANSACTION")
            # Sign the transaction
            signed_transaction = w3.eth.account.signTransaction(transaction, "75029fb3adb8ca1b275cbd6d224796d1795e13f9b578e2669666796666dd4881")
            print("AFTER SIGNING THE TRANSACTION")
            # Send the transaction
            transaction_hash = w3.eth.sendRawTransaction(signed_transaction.rawTransaction)
            print("AFTER GETTING THE TRANSACTION HASH")
            # Print the transaction hash
            print("Transaction Hash:", transaction_hash)
            # Check the transaction status
            receipt = w3.eth.waitForTransactionReceipt(transaction_hash)
            print("Transaction Receipt:", receipt["status"])
            # Interact with the contract (e.g., call functions)
            result = contract.functions.checkForUser("0x078893aE92b2e866464E9853da549304C4dB3e28").call()
            print("RESULT IS BELOW")
            print(result)
            if result:
              data = {
                  "response": "SUCCESS"
              }
            else:
              data = {
                "response": "FAILURE"
              }
            return Response(data)
          else:
            print("Connection Failed")
            data = {
              "response": "FAILURE"
            }
            if wallet_address == "0x078893aE92b2e866464E9853da549304C4dB3e28":
                data["wallet_address"] = True
            else:
                data["wallet_address"] = False
            return Response(data)   
    except Exception as e:
      print("IN THE EXCEPT BLOCK")
      print(e)
      data = {
        "response": "Something went wrong."
      }
      return Response(data)

@api_view(['POST'])
def pass_face_id(request):
    try:
      if config('IS_HEROKU_ENV', cast=bool):
        print("IS IN THE HEROKU IF")
        if w3.is_connected():        
          print("-" * 50)
          print("Connection Successful")
          print(w3.eth.chain_id)
          print(w3.eth.gas_price)
          print(w3.eth.block_number)
          print("-" * 50)
          contract_address = contract_address_const
          # contract_address = config('CONTRACT_ADDRESS')  # Replace with your contract address
          contract_abi = contract_abi_const
          print("SET THE CONTRACT ADDRRESS AND ABI")
          # # Create a contract object
          contract = w3.eth.contract(address=contract_address, abi=contract_abi)
          account = ''
          if request.data['isUserOne'] == True:
              account = '0x078893aE92b2e866464E9853da549304C4dB3e28'
          else:
              account = '0x60F4a7E61B3f675C08b682204D93e5E42b6bd2c7'
          print("CREATED THE CONTRACT VARIABLE")
          function_to_call = contract.functions.faceIdCheck(account, "TEMPORARYFACEIDCODE", 10000)
          print("AFTER FUNCTION TO CALL")
          # Build the transaction
          transaction = function_to_call.build_transaction({
              "chainId": 5,  # Replace with the appropriate chain ID
              "gasPrice": w3.to_wei('50', 'gwei'),  # Set the gas price as needed
              "gas": 200000,  # Set the gas limit as needed
              "nonce": w3.eth.get_transaction_count("0x078893aE92b2e866464E9853da549304C4dB3e28"),
          })
          print("AFTER MAKING THE TRANSACTION")
          # Sign the transaction
          signed_transaction = w3.eth.account.sign_transaction(transaction, "75029fb3adb8ca1b275cbd6d224796d1795e13f9b578e2669666796666dd4881")
          print("AFTER SIGNING THE TRANSACTION")
          # Send the transaction
          transaction_hash = w3.eth.send_raw_transaction(signed_transaction.rawTransaction)
          print("AFTER GETTING THE TRANSACTION HASH")
          # Print the transaction hash
          print("Transaction Hash:", transaction_hash)
          # Check the transaction status
          receipt = w3.eth.wait_for_transaction_receipt(transaction_hash)
          print("Transaction Receipt:", receipt["status"])
          #checkUserFaceIdChecked
          # Interact with the contract (e.g., call functions)
          result = contract.functions.checkUserFaceIdChecked("0x078893aE92b2e866464E9853da549304C4dB3e28").call()
          result2 = contract.functions.checkUserFaceIdChecked("0x60F4a7E61B3f675C08b682204D93e5E42b6bd2c7").call()
          result3 = contract.functions.getTotalTapTapCoinSupply().call()
          print("RESULT IS BELOW")
          print(result)
          print("RESULT2 IS BELOW")
          print(result2)
          print("RESULT3 IS BELOW")
          print(result3)
          sending_result = None
          # delete this if statement in future
          if request.data['isUserOne'] == True:
              sending_result = result
          else:
              sending_result = result2
          data = {
            "result": "SUCCESS",
            "passed": sending_result
          }
        else:
          print("Connection Failed")
          data = {
              "result": "FALIURE",
              "passed": False
          }
      else:
        print("IS NOT IN THE HEROKU IF")
        if w3.isConnected():        
          print("-" * 50)
          print("Connection Successful")
          print(w3.eth.chain_id)
          print(w3.eth.gas_price)
          print(w3.eth.block_number)
          print("-" * 50)
          contract_address = contract_address_const
          # contract_address = config('CONTRACT_ADDRESS')  # Replace with your contract address
          contract_abi = contract_abi_const
          print("SET THE CONTRACT ADDRRESS AND ABI")
          # # Create a contract object
          contract = w3.eth.contract(address=contract_address, abi=contract_abi)
          print("CREATED THE CONTRACT VARIABLE")
          function_to_call = contract.functions.faceIdCheck("0x078893aE92b2e866464E9853da549304C4dB3e28", "TEMPORARYFACEIDCODE", 10000)
          print("AFTER FUNCTION TO CALL")
          # Build the transaction
          transaction = function_to_call.buildTransaction({
              "chainId": 5,  # Replace with the appropriate chain ID
              "gasPrice": w3.toWei('50', 'gwei'),  # Set the gas price as needed
              "gas": 200000,  # Set the gas limit as needed
              "nonce": w3.eth.getTransactionCount("0x078893aE92b2e866464E9853da549304C4dB3e28"),
          })
          print("AFTER MAKING THE TRANSACTION")
          # Sign the transaction
          signed_transaction = w3.eth.account.signTransaction(transaction, "75029fb3adb8ca1b275cbd6d224796d1795e13f9b578e2669666796666dd4881")
          print("AFTER SIGNING THE TRANSACTION")
          # Send the transaction
          transaction_hash = w3.eth.sendRawTransaction(signed_transaction.rawTransaction)
          print("AFTER GETTING THE TRANSACTION HASH")
          # Print the transaction hash
          print("Transaction Hash:", transaction_hash)
          # Check the transaction status
          receipt = w3.eth.waitForTransactionReceipt(transaction_hash)
          print("Transaction Receipt:", receipt["status"])
          #checkUserFaceIdChecked
          # Interact with the contract (e.g., call functions)
          result = contract.functions.checkUserFaceIdChecked("0x078893aE92b2e866464E9853da549304C4dB3e28").call()
          print("RESULT IS BELOW")
          print(result)
          if request.data['isUserOne'] == True:
              sending_result = result
          else:
              sending_result = result2
          data = {
            "result": "SUCCESS",
              "passed": sending_result
          }
        else:
          print("Connection Failed")
          data = {
              "result": "FALIURE",
              "passed": False
          }
          
      return Response(data)
    except Exception as e:
        print("IN THE EXCEPT BLOCK")
        print(e)
        data = {
            "result": "Something went wrong.",
            "passed": False
        }
        return Response(data)

@api_view(['POST'])
def award_tap_coin(request):
    try:
      wallet_address = request.data['wallet']
      if wallet_address != "None":
        if config('IS_HEROKU_ENV', cast=bool):
          # Verify if the connection is successful
          if w3.is_connected():
            print("-" * 50)
            print("Connection Successful")
            print(w3.eth.chain_id)
            print(w3.eth.gas_price)
            print(w3.eth.block_number)
            print("-" * 50)
            print("THE WALLET ADDRESS IS BELOW")
            print(wallet_address)
            # Load the contract ABI and address
            contract_address = contract_address_const
            # contract_address = config('CONTRACT_ADDRESS')  # Replace with your contract address
            contract_abi = contract_abi_const
            print("SET THE CONTRACT ADDRRESS AND ABI")

            # # Create a contract object
            contract = w3.eth.contract(address=contract_address, abi=contract_abi)
            print("CREATED THE CONTRACT VARIABLE")
            total_contract_amount_before = contract.functions.getTotalContractAmount().call()
            print("GETTING TOTAL SUPPLY BEFORE FUNCTION CALL")
            print(total_contract_amount_before)
            winnings_amount = contract.functions.returnWinningsAmount().call()
            print("GETTING WINNINGS AMOUNT BEFORE FUNCTION CALL")
            print(winnings_amount)
            function_to_call = contract.functions.awardTapTapCoin()
            print("AFTER FUNCTION TO CALL")
            # Build the transaction
            transaction = function_to_call.build_transaction({
                "chainId": 5,  # Replace with the appropriate chain ID
                "gasPrice": w3.to_wei('50', 'gwei'),  # Set the gas price as needed
                "gas": 200000,  # Set the gas limit as needed
                "nonce": w3.eth.get_transaction_count("0x078893aE92b2e866464E9853da549304C4dB3e28"),
            })
            print("AFTER MAKING THE TRANSACTION")
            # Sign the transaction
            signed_transaction = w3.eth.account.sign_transaction(transaction, "75029fb3adb8ca1b275cbd6d224796d1795e13f9b578e2669666796666dd4881")
            print("AFTER SIGNING THE TRANSACTION")
            # Send the transaction
            transaction_hash = w3.eth.send_raw_transaction(signed_transaction.rawTransaction)
            print("AFTER GETTING THE TRANSACTION HASH")
            # Print the transaction hash
            print("Transaction Hash:", transaction_hash)
            # Check the transaction status
            receipt = w3.eth.wait_for_transaction_receipt(transaction_hash)
            print("Transaction Receipt:", receipt)
            print("Transaction Receipt STATUS:", receipt["status"])
            # Interact with the contract (e.g., call functions)
            total_contract_amount_after = contract.functions.getTotalContractAmount().call()
            print("GETTING TOTAL SUPPLY AFTER FUNCTION CALL")
            print(total_contract_amount_after)
            winnings_amount = contract.functions.returnWinningsAmount().call()
            print("GETTING WINNINGS AMOUNT AFTER FUNCTION CALL")
            print(winnings_amount)
            result = contract.functions.getUserStreakBoard("0x078893aE92b2e866464E9853da549304C4dB3e28").call()
            print("RESULT IS BELOW")
            print(result)
            if result:
              data = {
                  "response": "SUCCESS"
              }
            else:
              data = {
                "response": "FAILURE"
              }
            return Response(data)
          else:
            print("Connection Failed")
            data = {
              "response": "FAILURE"
            }
            return Response(data)
        else:
          if w3.isConnected():
            print("-" * 50)
            print("Connection Successful")
            print(w3.eth.chain_id)
            print(w3.eth.gas_price)
            print(w3.eth.block_number)
            print("-" * 50)
            print("THE WALLET ADDRESS IS BELOW")
            print(wallet_address)
            # Load the contract ABI and address
            contract_address = contract_address_const
            # contract_address = config('CONTRACT_ADDRESS')  # Replace with your contract address
            contract_abi = contract_abi_const
            print("SET THE CONTRACT ADDRRESS AND ABI")

            # # Create a contract object
            contract = w3.eth.contract(address=contract_address, abi=contract_abi)
            print("CREATED THE CONTRACT VARIABLE")
            account = ''
            if request.data['isUserOne'] == True:
                account = '0x078893aE92b2e866464E9853da549304C4dB3e28'
            else:
                account = '0x60F4a7E61B3f675C08b682204D93e5E42b6bd2c7'
            function_to_call = contract.functions.addWallet(account, "TEMPORARYADDWALLETPASSCODE")
            print("AFTER FUNCTION TO CALL")
            # Build the transaction
            transaction = function_to_call.buildTransaction({
                "chainId": 5,  # Replace with the appropriate chain ID
                "gasPrice": w3.toWei('50', 'gwei'),  # Set the gas price as needed
                "gas": 200000,  # Set the gas limit as needed
                "nonce": w3.eth.getTransactionCount("0x078893aE92b2e866464E9853da549304C4dB3e28"),
            })
            print("AFTER MAKING THE TRANSACTION")
            # Sign the transaction
            signed_transaction = w3.eth.account.signTransaction(transaction, "75029fb3adb8ca1b275cbd6d224796d1795e13f9b578e2669666796666dd4881")
            print("AFTER SIGNING THE TRANSACTION")
            # Send the transaction
            transaction_hash = w3.eth.sendRawTransaction(signed_transaction.rawTransaction)
            print("AFTER GETTING THE TRANSACTION HASH")
            # Print the transaction hash
            print("Transaction Hash:", transaction_hash)
            # Check the transaction status
            receipt = w3.eth.waitForTransactionReceipt(transaction_hash)
            print("Transaction Receipt:", receipt["status"])
            # Interact with the contract (e.g., call functions)
            result = contract.functions.checkForUser("0x078893aE92b2e866464E9853da549304C4dB3e28").call()
            print("RESULT IS BELOW")
            print(result)
            if result:
              data = {
                  "response": "SUCCESS"
              }
            else:
              data = {
                "response": "FAILURE"
              }
            return Response(data)
          else:
            print("Connection Failed")
            data = {
              "response": "FAILURE"
            }
            if wallet_address == "0x078893aE92b2e866464E9853da549304C4dB3e28":
                data["wallet_address"] = True
            else:
                data["wallet_address"] = False
            return Response(data)   
    except Exception as e:
        print("IN THE EXCEPT BLOCK")
        print(e)
        data = {
        "response": "Something went wrong."
        }
        return Response(data)

@api_view(['POST'])
def test_update_players_wins(request):
  print("***** IN THE UPDATE PLAYERS WINS FUNCTION *****")
  print("***** IN THE UPDATE PLAYERS WINS FUNCTION *****")
  print("***** IN THE UPDATE PLAYERS WINS FUNCTION *****")
  try:
    if w3.is_connected():        
      print("-" * 50)
      print("Connection Successful")
      print(w3.eth.chain_id)
      print(w3.eth.gas_price)
      print(w3.eth.block_number)
      print("-" * 50)
      account2 = '0x60F4a7E61B3f675C08b682204D93e5E42b6bd2c7'
      contract_address = contract_address_const
      # contract_address = config('CONTRACT_ADDRESS')  # Replace with your contract address
      contract_abi = contract_abi_const
      print("SET THE CONTRACT ADDRRESS AND ABI")
      # # Create a contract object
      contract = w3.eth.contract(address=contract_address, abi=contract_abi)
      print("CREATED THE CONTRACT VARIABLE")
      function_to_call = contract.functions.updatePlayersWins(account2, "0x078893aE92b2e866464E9853da549304C4dB3e28", 10000, 10000, 70)
      print("AFTER FUNCTION TO CALL")
      # Build the transaction
      transaction = function_to_call.build_transaction({
          "chainId": 5,  # Replace with the appropriate chain ID
          "gasPrice": w3.to_wei('50', 'gwei'),  # Set the gas price as needed
          "gas": 200000,  # Set the gas limit as needed
          "nonce": w3.eth.get_transaction_count("0x078893aE92b2e866464E9853da549304C4dB3e28"),
      })
      print("AFTER MAKING THE TRANSACTION")
      # Sign the transaction
      signed_transaction = w3.eth.account.sign_transaction(transaction, "75029fb3adb8ca1b275cbd6d224796d1795e13f9b578e2669666796666dd4881")
      print("AFTER SIGNING THE TRANSACTION")
      # Send the transaction
      transaction_hash = w3.eth.send_raw_transaction(signed_transaction.rawTransaction)
      print("AFTER GETTING THE TRANSACTION HASH")
      # Print the transaction hash
      print("Transaction Hash:", transaction_hash)
      # Check the transaction status
      receipt = w3.eth.wait_for_transaction_receipt(transaction_hash)
      print("Transaction Receipt:", receipt["status"])
      #checkUserFaceIdChecked
      # Interact with the contract (e.g., call functions)
      # returnWinningsAmount
      result = contract.functions.getUserStreakBoard(account2).call()
      result2 = contract.functions.returnWinningsAmount().call()
      result3 = contract.functions.getUserStreakBoard("0x078893aE92b2e866464E9853da549304C4dB3e28").call()
    #   result4 = contract.functions.get_test_var().call()
    #   result5 = contract.functions.getTotalTapTapCoinSupply().call()
      # getTotalTapTapCoinSupply
      print("RESULT IS BELOW")
      print(result)
      print("RESULT2 BELOW")
      print(result2)
      print("RESULT3 BELOW")
      print(result3)
      print(request.data["testing"])
    #   print("RESULT 4 BELOW")
    #   print(result4)
    #   print("RESULT 5 BELOW")
    #   print(result5)
    data = {
      "result": "NOTDEVENVIORNMENT"
    }
    return Response(data)
  except Exception as e:
    print("IN THE EXCEPT BLOCK")
    print(e)
    data = {
        "result": "Something went wrong."
    }
    return Response(data)