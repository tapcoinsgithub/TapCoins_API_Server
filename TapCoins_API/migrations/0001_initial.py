# Generated by Django 4.2.11 on 2024-03-14 15:35

import TapCoins_API.models
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CommentOrBug',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.CharField(max_length=150, verbose_name='CommentOrBug')),
                ('user', models.CharField(max_length=80, verbose_name='username')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='FriendModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sending_user', models.CharField(max_length=80, null=True)),
                ('receiving_user', models.CharField(max_length=80, null=True)),
                ('pending_request', models.BooleanField(default=False, verbose_name='pending request')),
                ('users_names_string', models.CharField(max_length=160, null=True, unique=True, verbose_name='both users names')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first', models.CharField(max_length=80, null=True, verbose_name='first player')),
                ('second', models.CharField(max_length=80, null=True, verbose_name='second player')),
                ('winner', models.CharField(max_length=80, null=True, verbose_name='winner')),
                ('winner_streak', models.IntegerField(null=True, verbose_name='winner streak')),
                ('fPoints', models.IntegerField(null=True, verbose_name='first points')),
                ('sPoints', models.IntegerField(null=True, verbose_name='second points')),
                ('gameId', models.CharField(max_length=16, unique=True, verbose_name='game id')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender', models.CharField(max_length=80, null=True, verbose_name='sender')),
                ('reciever', models.CharField(max_length=80, null=True, verbose_name='reciever')),
                ('accepted', models.BooleanField(default=False, verbose_name='accepted invite')),
                ('cancel', models.BooleanField(default=False, verbose_name='cancel invite')),
                ('gameId', models.CharField(max_length=16, unique=True, verbose_name='game id')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('league_title', models.CharField(max_length=80, null=True, verbose_name='league title')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
        ),
        migrations.CreateModel(
            name='SecurityQuestionsText',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=16, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UsersSecurityQuestionsAnswers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_1', models.CharField(max_length=160, null=True, verbose_name='question one')),
                ('answer_1', models.CharField(max_length=160, null=True, verbose_name='answer one')),
                ('question_2', models.CharField(max_length=160, null=True, verbose_name='question two')),
                ('answer_2', models.CharField(max_length=160, null=True, verbose_name='answer two')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('first_name', models.CharField(max_length=80, null=True, verbose_name='first name')),
                ('last_name', models.CharField(max_length=80, null=True, verbose_name='last name')),
                ('username', models.CharField(max_length=80, null=True, unique=True)),
                ('phone_number', models.CharField(max_length=16, null=True)),
                ('password', models.CharField(max_length=80, null=True, unique=True)),
                ('cg_Id', models.CharField(max_length=16, null=True, verbose_name='current game id')),
                ('token', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='TapCoins_API.token')),
                ('friends', django.contrib.postgres.fields.ArrayField(base_field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(default=0), blank=True, null=True, size=None), blank=True, default=list, null=True, size=None)),
                ('win_streak', models.IntegerField(default=0, null=True, verbose_name='win streak')),
                ('best_streak', models.IntegerField(default=0, null=True, verbose_name='best streak')),
                ('has_streak', models.BooleanField(default=False, verbose_name='has streak')),
                ('lost_streak', models.BooleanField(default=False, verbose_name='lost streak')),
                ('wins', models.IntegerField(default=0, null=True, verbose_name='wins')),
                ('losses', models.IntegerField(default=0, null=True, verbose_name='losses')),
                ('games', models.IntegerField(default=0, null=True, verbose_name='number of games')),
                ('league', models.IntegerField(choices=[(TapCoins_API.models.LeagueEnum['NOOB_TAPPER'], 1), (TapCoins_API.models.LeagueEnum['BAD_TAPPER'], 2), (TapCoins_API.models.LeagueEnum['OKAY_TAPPER'], 3), (TapCoins_API.models.LeagueEnum['BETTER_TAPPER'], 4), (TapCoins_API.models.LeagueEnum['GOOD_TAPPER'], 5), (TapCoins_API.models.LeagueEnum['SOLID_TAPPER'], 6), (TapCoins_API.models.LeagueEnum['SUPER_TAPPER'], 7), (TapCoins_API.models.LeagueEnum['MEGA_TAPPER'], 8), (TapCoins_API.models.LeagueEnum['GODLY_TAPPER'], 9)], default=1, null=True, verbose_name='league placement')),
                ('p_code', models.IntegerField(null=True)),
                ('in_game', models.BooleanField(default=False, verbose_name='in game')),
                ('in_queue', models.BooleanField(default=False, verbose_name='in queue')),
                ('logged_in', models.BooleanField(default=False, verbose_name='logged in')),
                ('in_create_game', models.BooleanField(default=False, verbose_name='in create game')),
                ('is_guest', models.BooleanField(default=False, verbose_name='is guest')),
                ('has_phone_number', models.BooleanField(default=False, verbose_name='has a phone number')),
                ('has_game_invite', models.BooleanField(default=False, verbose_name='has a game invite')),
                ('p_code_time', models.DateTimeField(null=True, verbose_name='password code time added')),
                ('streak_time', models.DateTimeField(null=True, verbose_name='win streak time')),
                ('has_wallet', models.BooleanField(default=False, verbose_name='has wallet')),
                ('has_location', models.BooleanField(default=False, verbose_name='has location')),
                ('user_latitude', models.CharField(max_length=160, null=True, verbose_name='users latitude')),
                ('user_longitude', models.CharField(max_length=160, null=True, verbose_name='users longitude')),
                ('user_time_zone', models.CharField(max_length=160, null=True, verbose_name='user time zone')),
                ('is_active', models.BooleanField(default=False, null=True, verbose_name='is active')),
                ('is_active_task_value', models.BooleanField(default=False, null=True, verbose_name='is active task value')),
                ('last_active_date', models.DateTimeField(auto_now=True, null=True, verbose_name='last active date')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('security_questions_answers', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to='TapCoins_API.userssecurityquestionsanswers')),
            ],
        ),
    ]
